[
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "django.db.models.deletion",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.db.models.deletion",
        "description": "django.db.models.deletion",
        "detail": "django.db.models.deletion",
        "documentation": {}
    },
    {
        "label": "django.utils.timezone",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.utils.timezone",
        "description": "django.utils.timezone",
        "detail": "django.utils.timezone",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "routers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "viewsets",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include_docs_urls",
        "importPath": "rest_framework.documentation",
        "description": "rest_framework.documentation",
        "isExtraImport": true,
        "detail": "rest_framework.documentation",
        "documentation": {}
    },
    {
        "label": "views",
        "importPath": "tareas",
        "description": "tareas",
        "isExtraImport": true,
        "detail": "tareas",
        "documentation": {}
    },
    {
        "label": "MostarTareas",
        "importPath": "tareas.views",
        "description": "tareas.views",
        "isExtraImport": true,
        "detail": "tareas.views",
        "documentation": {}
    },
    {
        "label": "CrearTarea",
        "importPath": "tareas.views",
        "description": "tareas.views",
        "isExtraImport": true,
        "detail": "tareas.views",
        "documentation": {}
    },
    {
        "label": "BorrarTarea",
        "importPath": "tareas.views",
        "description": "tareas.views",
        "isExtraImport": true,
        "detail": "tareas.views",
        "documentation": {}
    },
    {
        "label": "ActualizarTarea",
        "importPath": "tareas.views",
        "description": "tareas.views",
        "isExtraImport": true,
        "detail": "tareas.views",
        "documentation": {}
    },
    {
        "label": "DetallesTarea",
        "importPath": "tareas.views",
        "description": "tareas.views",
        "isExtraImport": true,
        "detail": "tareas.views",
        "documentation": {}
    },
    {
        "label": "Registro",
        "importPath": "tareas.views",
        "description": "tareas.views",
        "isExtraImport": true,
        "detail": "tareas.views",
        "documentation": {}
    },
    {
        "label": "TokenObtainPairView",
        "importPath": "rest_framework_simplejwt.views",
        "description": "rest_framework_simplejwt.views",
        "isExtraImport": true,
        "detail": "rest_framework_simplejwt.views",
        "documentation": {}
    },
    {
        "label": "TokenRefreshView",
        "importPath": "rest_framework_simplejwt.views",
        "description": "rest_framework_simplejwt.views",
        "isExtraImport": true,
        "detail": "rest_framework_simplejwt.views",
        "documentation": {}
    },
    {
        "label": "TokenObtainPairView",
        "importPath": "rest_framework_simplejwt.views",
        "description": "rest_framework_simplejwt.views",
        "isExtraImport": true,
        "detail": "rest_framework_simplejwt.views",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "APIView",
        "importPath": "rest_framework.views",
        "description": "rest_framework.views",
        "isExtraImport": true,
        "detail": "rest_framework.views",
        "documentation": {}
    },
    {
        "label": "authenticate",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "authentication_classes",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "permission_classes",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "IsAuthenticated",
        "importPath": "rest_framework.permissions",
        "description": "rest_framework.permissions",
        "isExtraImport": true,
        "detail": "rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "JWTAuthentication",
        "importPath": "rest_framework_simplejwt.authentication",
        "description": "rest_framework_simplejwt.authentication",
        "isExtraImport": true,
        "detail": "rest_framework_simplejwt.authentication",
        "documentation": {}
    },
    {
        "label": "RefreshToken",
        "importPath": "rest_framework_simplejwt.tokens",
        "description": "rest_framework_simplejwt.tokens",
        "isExtraImport": true,
        "detail": "rest_framework_simplejwt.tokens",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "tareas.migrations.0001_initial",
        "description": "tareas.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Tarea',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('titulo', models.CharField(max_length=200)),",
        "detail": "tareas.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "tareas.migrations.0002_alter_tarea_options_rename_hecho_tarea_finalizado_and_more",
        "description": "tareas.migrations.0002_alter_tarea_options_rename_hecho_tarea_finalizado_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n        ('tareas', '0001_initial'),\n    ]\n    operations = [\n        migrations.AlterModelOptions(\n            name='tarea',\n            options={'ordering': ['creado']},\n        ),",
        "detail": "tareas.migrations.0002_alter_tarea_options_rename_hecho_tarea_finalizado_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "tareas.migrations.0003_alter_tarea_options",
        "description": "tareas.migrations.0003_alter_tarea_options",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('tareas', '0002_alter_tarea_options_rename_hecho_tarea_finalizado_and_more'),\n    ]\n    operations = [\n        migrations.AlterModelOptions(\n            name='tarea',\n            options={'ordering': ('titulo',), 'verbose_name': 'Tarea', 'verbose_name_plural': 'Tareas'},\n        ),\n    ]",
        "detail": "tareas.migrations.0003_alter_tarea_options",
        "documentation": {}
    },
    {
        "label": "TareasConfig",
        "kind": 6,
        "importPath": "tareas.apps",
        "description": "tareas.apps",
        "peekOfCode": "class TareasConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'tareas'",
        "detail": "tareas.apps",
        "documentation": {}
    },
    {
        "label": "Tarea",
        "kind": 6,
        "importPath": "tareas.models",
        "description": "tareas.models",
        "peekOfCode": "class Tarea(models.Model):\n    titulo = models.CharField(max_length=200)\n    descripcion = models.TextField(max_length=1000)\n    creado = models.DateTimeField(auto_now_add=True)\n    finalizado = models.BooleanField(default=False)\n    user = models.ForeignKey(User, on_delete=models.CASCADE)\n    class Meta:\n        ordering = ('titulo',)\n        verbose_name = 'Tarea'\n        verbose_name_plural = 'Tareas'",
        "detail": "tareas.models",
        "documentation": {}
    },
    {
        "label": "TareaSerializer",
        "kind": 6,
        "importPath": "tareas.serializers",
        "description": "tareas.serializers",
        "peekOfCode": "class TareaSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Tarea\n        fields = '__all__'\n    read_only_fields = (\n        'id',\n        'created_at',\n        'updated_at'\n        )\n# Class para Usuario",
        "detail": "tareas.serializers",
        "documentation": {}
    },
    {
        "label": "UserRegistrationSerializer",
        "kind": 6,
        "importPath": "tareas.serializers",
        "description": "tareas.serializers",
        "peekOfCode": "class UserRegistrationSerializer(serializers.ModelSerializer):\n    password = serializers.CharField(write_only=True, required=True, style={'input_type': 'password'})\n    email = serializers.EmailField(required=True)\n    username = serializers.CharField(required=True)\n    first_name = serializers.CharField(required=True)\n    last_name = serializers.CharField(required=True)\n    class Meta:\n        model = User\n        fields = ('username', 'first_name', 'last_name', 'email', 'password')\n    def validate_username(self, value):",
        "detail": "tareas.serializers",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "tareas.urls",
        "description": "tareas.urls",
        "peekOfCode": "router = routers.DefaultRouter()\nrouter.register(r'tareas', views.TareaViewSet, basename='tarea')\nurlpatterns = [\n       path('admin/', admin.site.urls),\n       path('docs/', include_docs_urls(title=\"API Rest\")),\n       path('ver/<int:pk>/', DetallesTarea.as_view()), #GET\n       path('vertodo/', MostarTareas.as_view()), # GET\n       path('crear/', CrearTarea.as_view()), # POST\n       path('borrar/<int:pk>/', BorrarTarea.as_view()), # DELETE / pk= es la id de la tarea en la url\n       path('actualizar/<int:pk>/', ActualizarTarea.as_view()), # PUT / pk= es id de la tarea en la url",
        "detail": "tareas.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "tareas.urls",
        "description": "tareas.urls",
        "peekOfCode": "urlpatterns = [\n       path('admin/', admin.site.urls),\n       path('docs/', include_docs_urls(title=\"API Rest\")),\n       path('ver/<int:pk>/', DetallesTarea.as_view()), #GET\n       path('vertodo/', MostarTareas.as_view()), # GET\n       path('crear/', CrearTarea.as_view()), # POST\n       path('borrar/<int:pk>/', BorrarTarea.as_view()), # DELETE / pk= es la id de la tarea en la url\n       path('actualizar/<int:pk>/', ActualizarTarea.as_view()), # PUT / pk= es id de la tarea en la url\n       path('registro/', Registro.as_view(), name='register'), # POST\n       path('login/', CustomTokenObtainPairView.as_view()), #POST",
        "detail": "tareas.urls",
        "documentation": {}
    },
    {
        "label": "TareaViewSet",
        "kind": 6,
        "importPath": "tareas.views",
        "description": "tareas.views",
        "peekOfCode": "class TareaViewSet(viewsets.ModelViewSet): # ModelViewSet se usa importando (from rest_framework import viewsets)\n    queryset = Tarea.objects.all()  #especificar qué conjunto de datos se debe consultar de la base de datos\n    serializer_class = TareaSerializer # eindicamos cuales son los datos que usaremos y estan serializados\n#mostrar todas las Tareas \n@authentication_classes([JWTAuthentication])\n@permission_classes([IsAuthenticated])\nclass MostarTareas(APIView):\n    @authentication_classes([JWTAuthentication])\n    @permission_classes([IsAuthenticated])\n    def get(self, request):",
        "detail": "tareas.views",
        "documentation": {}
    },
    {
        "label": "MostarTareas",
        "kind": 6,
        "importPath": "tareas.views",
        "description": "tareas.views",
        "peekOfCode": "class MostarTareas(APIView):\n    @authentication_classes([JWTAuthentication])\n    @permission_classes([IsAuthenticated])\n    def get(self, request):\n        tareas = Tarea.objects.filter(user=request.user).order_by('titulo')\n        serializer = TareaSerializer(tareas, many=True)\n        return Response(serializer.data, status=status.HTTP_200_OK)\n# Crear Tarea\n@authentication_classes([JWTAuthentication])\n@permission_classes([IsAuthenticated])",
        "detail": "tareas.views",
        "documentation": {}
    },
    {
        "label": "CrearTarea",
        "kind": 6,
        "importPath": "tareas.views",
        "description": "tareas.views",
        "peekOfCode": "class CrearTarea(APIView):\n    def post(self, request, format=None):\n        serializer = TareaSerializer(data=request.data) \n        if serializer.is_valid(): \n            tarea = serializer.save(user=request.user)  # Asigna el usuario actual a la tarea\n            return Response(TareaSerializer(tarea).data, status=status.HTTP_201_CREATED) \n        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n# Borrar Tarea\n@authentication_classes([JWTAuthentication])\n@permission_classes([IsAuthenticated])",
        "detail": "tareas.views",
        "documentation": {}
    },
    {
        "label": "BorrarTarea",
        "kind": 6,
        "importPath": "tareas.views",
        "description": "tareas.views",
        "peekOfCode": "class BorrarTarea(APIView):\n    authentication_classes = [JWTAuthentication]\n    permission_classes = [IsAuthenticated]\n    def delete(self, request, pk):\n        tarea = Tarea.objects.filter(pk=pk, user=request.user).first()\n        if not tarea:\n            return Response({\"error\": \"La tarea no existe o no tienes permiso para eliminarla\"}, status=status.HTTP_404_NOT_FOUND)\n        serializer = TareaSerializer(tarea)\n        tarea.delete()\n        return Response(serializer.data, status=status.HTTP_200_OK)",
        "detail": "tareas.views",
        "documentation": {}
    },
    {
        "label": "DetallesTarea",
        "kind": 6,
        "importPath": "tareas.views",
        "description": "tareas.views",
        "peekOfCode": "class DetallesTarea(APIView):\n    @authentication_classes([JWTAuthentication])\n    @permission_classes([IsAuthenticated])\n    def get(self, request, pk):\n        tarea = Tarea.objects.filter(pk=pk, user=request.user).first()\n        if not tarea:\n            return Response({\"error\": \"La tarea no existe o no tienes permiso para ver los detalles\"}, status=status.HTTP_404_NOT_FOUND)\n        serializer = TareaSerializer(tarea)\n        return Response(serializer.data, status=status.HTTP_200_OK)\n#actualizar tarea",
        "detail": "tareas.views",
        "documentation": {}
    },
    {
        "label": "ActualizarTarea",
        "kind": 6,
        "importPath": "tareas.views",
        "description": "tareas.views",
        "peekOfCode": "class ActualizarTarea(APIView):\n    def put(self, request, pk):\n        tarea = Tarea.objects.filter(pk=pk, user=request.user).first()\n        if not tarea:\n            return Response({\"error\": \"La tarea no existe o no tienes permiso para actualizarla\"}, status=status.HTTP_404_NOT_FOUND)\n        serializer = TareaSerializer(tarea, data=request.data)\n        if serializer.is_valid():\n            serializer.save()\n            return Response(serializer.data, status=status.HTTP_200_OK)\n        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)",
        "detail": "tareas.views",
        "documentation": {}
    },
    {
        "label": "Registro",
        "kind": 6,
        "importPath": "tareas.views",
        "description": "tareas.views",
        "peekOfCode": "class Registro(APIView):\n    def post(self, request, format=None):\n        serializer = UserRegistrationSerializer(data=request.data)\n        if serializer.is_valid():\n            # Verificar si el nombre de usuario y el correo electrónico ya están en uso\n            username = serializer.validated_data['username']\n            email = serializer.validated_data['email']\n            if User.objects.filter(username=username).exists():\n                return Response({'error': 'Este nombre de usuario ya está en uso.'}, status=status.HTTP_400_BAD_REQUEST)\n            if User.objects.filter(email=email).exists():",
        "detail": "tareas.views",
        "documentation": {}
    },
    {
        "label": "CustomTokenObtainPairView",
        "kind": 6,
        "importPath": "tareas.views",
        "description": "tareas.views",
        "peekOfCode": "class CustomTokenObtainPairView(TokenObtainPairView):\n    def post(self, request, *args, **kwargs):\n        response = super(CustomTokenObtainPairView, self).post(request, *args, **kwargs)\n        # Comprueba si la solicitud de inicio de sesión fue exitosa\n        if response.status_code == status.HTTP_200_OK:\n            # Extrae el token de acceso (access token) del cuerpo de la respuesta\n            access_token = response.data.get('access', None)\n            # Si se ha obtenido un token de acceso, devuélvelo en la respuesta personalizada\n            if access_token:\n                return Response({'access_token': access_token}, status=status.HTTP_200_OK)",
        "detail": "tareas.views",
        "documentation": {}
    },
    {
        "label": "TokenRefreshView",
        "kind": 6,
        "importPath": "tareas.views",
        "description": "tareas.views",
        "peekOfCode": "class TokenRefreshView(APIView):\n    def post(self, request, *args, **kwargs):\n        # Obtener el token de actualización de la solicitud\n        refresh_token = request.data.get('refresh_token')\n        # Comprobar si se proporcionó un token de actualización\n        if not refresh_token:\n            return Response({'error': 'Se requiere un token de actualización'}, status=status.HTTP_400_BAD_REQUEST)\n        try:\n            # Intentar refrescar el token de acceso\n            refresh = RefreshToken(refresh_token)",
        "detail": "tareas.views",
        "documentation": {}
    },
    {
        "label": "Obtener_Datos",
        "kind": 6,
        "importPath": "tareas.views",
        "description": "tareas.views",
        "peekOfCode": "class Obtener_Datos(APIView):\n    def get(self, request):\n        user = request.user\n        payload = {\n            \"usuario\": user.username,\n            \"nombre\": user.first_name,\n            \"apellido\": user.last_name,\n            \"email\": user.email,\n        }\n        return Response(payload, status=status.HTTP_200_OK)",
        "detail": "tareas.views",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "tp.asgi",
        "description": "tp.asgi",
        "peekOfCode": "application = get_asgi_application()",
        "detail": "tp.asgi",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "tp.settings",
        "description": "tp.settings",
        "peekOfCode": "BASE_DIR = Path(__file__).resolve().parent.parent\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'django-insecure-6v6_0@#ua%jr4sjy4ig8przm+h38#0hhja4d9=x2hy3d_n8al9'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = []\n# Application definition\n# Agregamos nuestra aplicacion llamada tareas  y ejecutamos los siguiente",
        "detail": "tp.settings",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "tp.settings",
        "description": "tp.settings",
        "peekOfCode": "SECRET_KEY = 'django-insecure-6v6_0@#ua%jr4sjy4ig8przm+h38#0hhja4d9=x2hy3d_n8al9'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = []\n# Application definition\n# Agregamos nuestra aplicacion llamada tareas  y ejecutamos los siguiente\n# python manage.py migrate\n# tambien agregamos el corsheaders y rest_framework\n# agregamos modulo coreapi\nINSTALLED_APPS = [",
        "detail": "tp.settings",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "tp.settings",
        "description": "tp.settings",
        "peekOfCode": "DEBUG = True\nALLOWED_HOSTS = []\n# Application definition\n# Agregamos nuestra aplicacion llamada tareas  y ejecutamos los siguiente\n# python manage.py migrate\n# tambien agregamos el corsheaders y rest_framework\n# agregamos modulo coreapi\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',",
        "detail": "tp.settings",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "tp.settings",
        "description": "tp.settings",
        "peekOfCode": "ALLOWED_HOSTS = []\n# Application definition\n# Agregamos nuestra aplicacion llamada tareas  y ejecutamos los siguiente\n# python manage.py migrate\n# tambien agregamos el corsheaders y rest_framework\n# agregamos modulo coreapi\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',",
        "detail": "tp.settings",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "tp.settings",
        "description": "tp.settings",
        "peekOfCode": "INSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'corsheaders',\n    'rest_framework',\n    'rest_framework.authtoken',",
        "detail": "tp.settings",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "tp.settings",
        "description": "tp.settings",
        "peekOfCode": "MIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'corsheaders.middleware.CorsMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]",
        "detail": "tp.settings",
        "documentation": {}
    },
    {
        "label": "CORS_ALLOW_ALL_ORIGINS",
        "kind": 5,
        "importPath": "tp.settings",
        "description": "tp.settings",
        "peekOfCode": "CORS_ALLOW_ALL_ORIGINS = True\nCORS_ALLOW_METHODS = [\n    \"DELETE\",\n    \"GET\",\n    \"POST\",\n    \"PUT\",\n]\nROOT_URLCONF = 'tp.urls'\nTEMPLATES = [\n    {",
        "detail": "tp.settings",
        "documentation": {}
    },
    {
        "label": "CORS_ALLOW_METHODS",
        "kind": 5,
        "importPath": "tp.settings",
        "description": "tp.settings",
        "peekOfCode": "CORS_ALLOW_METHODS = [\n    \"DELETE\",\n    \"GET\",\n    \"POST\",\n    \"PUT\",\n]\nROOT_URLCONF = 'tp.urls'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',",
        "detail": "tp.settings",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "tp.settings",
        "description": "tp.settings",
        "peekOfCode": "ROOT_URLCONF = 'tp.urls'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',",
        "detail": "tp.settings",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "tp.settings",
        "description": "tp.settings",
        "peekOfCode": "TEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',",
        "detail": "tp.settings",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "tp.settings",
        "description": "tp.settings",
        "peekOfCode": "WSGI_APPLICATION = 'tp.wsgi.application'\n# Database\n# https://docs.djangoproject.com/en/4.0/ref/settings/#databases\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n# Password validation",
        "detail": "tp.settings",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "tp.settings",
        "description": "tp.settings",
        "peekOfCode": "DATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n# Password validation\n# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators\nAUTH_PASSWORD_VALIDATORS = [\n    {",
        "detail": "tp.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "tp.settings",
        "description": "tp.settings",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },",
        "detail": "tp.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "tp.settings",
        "description": "tp.settings",
        "peekOfCode": "LANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.0/howto/static-files/\nSTATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "tp.settings",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "tp.settings",
        "description": "tp.settings",
        "peekOfCode": "TIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.0/howto/static-files/\nSTATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n#Agregamos una lista de los que se pueden conectar a esta API",
        "detail": "tp.settings",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "tp.settings",
        "description": "tp.settings",
        "peekOfCode": "USE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.0/howto/static-files/\nSTATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n#Agregamos una lista de los que se pueden conectar a esta API\n#CORS_ALLOWED_ORIGINS = []",
        "detail": "tp.settings",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "tp.settings",
        "description": "tp.settings",
        "peekOfCode": "USE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.0/howto/static-files/\nSTATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n#Agregamos una lista de los que se pueden conectar a esta API\n#CORS_ALLOWED_ORIGINS = []\nREST_FRAMEWORK = {",
        "detail": "tp.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "tp.settings",
        "description": "tp.settings",
        "peekOfCode": "STATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n#Agregamos una lista de los que se pueden conectar a esta API\n#CORS_ALLOWED_ORIGINS = []\nREST_FRAMEWORK = {\n    'DEFAULT_SCHEMA_CLASS': 'rest_framework.schemas.coreapi.AutoSchema',\n    'DEFAULT_AUTHENTICATION_CLASSES': (\n        'rest_framework.authentication.TokenAuthentication',",
        "detail": "tp.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_AUTO_FIELD",
        "kind": 5,
        "importPath": "tp.settings",
        "description": "tp.settings",
        "peekOfCode": "DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n#Agregamos una lista de los que se pueden conectar a esta API\n#CORS_ALLOWED_ORIGINS = []\nREST_FRAMEWORK = {\n    'DEFAULT_SCHEMA_CLASS': 'rest_framework.schemas.coreapi.AutoSchema',\n    'DEFAULT_AUTHENTICATION_CLASSES': (\n        'rest_framework.authentication.TokenAuthentication',\n        'rest_framework_simplejwt.authentication.JWTAuthentication',\n    ),\n}",
        "detail": "tp.settings",
        "documentation": {}
    },
    {
        "label": "#CORS_ALLOWED_ORIGINS",
        "kind": 5,
        "importPath": "tp.settings",
        "description": "tp.settings",
        "peekOfCode": "#CORS_ALLOWED_ORIGINS = []\nREST_FRAMEWORK = {\n    'DEFAULT_SCHEMA_CLASS': 'rest_framework.schemas.coreapi.AutoSchema',\n    'DEFAULT_AUTHENTICATION_CLASSES': (\n        'rest_framework.authentication.TokenAuthentication',\n        'rest_framework_simplejwt.authentication.JWTAuthentication',\n    ),\n}\nALLOWED_HOSTS = ['localhost', '127.0.0.1']\nCORS_ALLOW_HEADERS = [",
        "detail": "tp.settings",
        "documentation": {}
    },
    {
        "label": "REST_FRAMEWORK",
        "kind": 5,
        "importPath": "tp.settings",
        "description": "tp.settings",
        "peekOfCode": "REST_FRAMEWORK = {\n    'DEFAULT_SCHEMA_CLASS': 'rest_framework.schemas.coreapi.AutoSchema',\n    'DEFAULT_AUTHENTICATION_CLASSES': (\n        'rest_framework.authentication.TokenAuthentication',\n        'rest_framework_simplejwt.authentication.JWTAuthentication',\n    ),\n}\nALLOWED_HOSTS = ['localhost', '127.0.0.1']\nCORS_ALLOW_HEADERS = [\n    'Authorization',",
        "detail": "tp.settings",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "tp.settings",
        "description": "tp.settings",
        "peekOfCode": "ALLOWED_HOSTS = ['localhost', '127.0.0.1']\nCORS_ALLOW_HEADERS = [\n    'Authorization',\n    'Content-Type',\n]\nSIMPLE_JWT = {\n    'ACCESS_TOKEN_LIFETIME': timedelta(hours=1),\n    'SLIDING_TOKEN_REFRESH_LIFETIME': timedelta(days=1),\n    'SLIDING_TOKEN_LIFETIME': timedelta(days=2),\n    'SLIDING_TOKEN_REFRESH_MAX_LIFETIME': timedelta(days=3),",
        "detail": "tp.settings",
        "documentation": {}
    },
    {
        "label": "CORS_ALLOW_HEADERS",
        "kind": 5,
        "importPath": "tp.settings",
        "description": "tp.settings",
        "peekOfCode": "CORS_ALLOW_HEADERS = [\n    'Authorization',\n    'Content-Type',\n]\nSIMPLE_JWT = {\n    'ACCESS_TOKEN_LIFETIME': timedelta(hours=1),\n    'SLIDING_TOKEN_REFRESH_LIFETIME': timedelta(days=1),\n    'SLIDING_TOKEN_LIFETIME': timedelta(days=2),\n    'SLIDING_TOKEN_REFRESH_MAX_LIFETIME': timedelta(days=3),\n    'SLIDING_TOKEN_REFRESH_LIFETIME_GRACE_PERIOD': timedelta(days=1),",
        "detail": "tp.settings",
        "documentation": {}
    },
    {
        "label": "SIMPLE_JWT",
        "kind": 5,
        "importPath": "tp.settings",
        "description": "tp.settings",
        "peekOfCode": "SIMPLE_JWT = {\n    'ACCESS_TOKEN_LIFETIME': timedelta(hours=1),\n    'SLIDING_TOKEN_REFRESH_LIFETIME': timedelta(days=1),\n    'SLIDING_TOKEN_LIFETIME': timedelta(days=2),\n    'SLIDING_TOKEN_REFRESH_MAX_LIFETIME': timedelta(days=3),\n    'SLIDING_TOKEN_REFRESH_LIFETIME_GRACE_PERIOD': timedelta(days=1),\n    'SLIDING_TOKEN_REFRESH_EACH_TIME_REQUEST': True,\n}",
        "detail": "tp.settings",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "tp.urls",
        "description": "tp.urls",
        "peekOfCode": "urlpatterns = [\n    path('admin/', admin.site.urls),\n    path('tareas/', include('tareas.urls')) \n]",
        "detail": "tp.urls",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "tp.wsgi",
        "description": "tp.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "tp.wsgi",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "manage",
        "description": "manage",
        "peekOfCode": "def main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'tp.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"",
        "detail": "manage",
        "documentation": {}
    }
]